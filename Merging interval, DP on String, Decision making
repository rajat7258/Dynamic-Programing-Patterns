Merging Intervals
Problem List: https://leetcode.com/list/55aj8s16


Generate problem statement for this pattern


Statement
Given a set of numbers find an optimal solution for a problem considering the current number and the best you can get from the left and right sides.


Approach
Find all optimal solutions for every interval and return the best possible answer.


// from i to j
dp[i][j] = dp[i][k] + result[k] + dp[k+1][j]
Get the best from the left and right sides and add a solution for the current position.


Top-Down
for (int k = i; k <= j; ++k) {
    result = max(result, topDown(nums, i, k-1) + result[k] + topDown(nums, k+1, j));
}
return memo[/*state parameters*/] = result;
Bottom-Up
for(int l = 1; l<n; l++) {
   for(int i = 0; i<n-l; i++) {
       int j = i+l;
       for(int k = i; k<j; k++) {
           dp[i][j] = max(dp[i][j], dp[i][k] + result[k] + dp[k+1][j]);
       }
   }
}
 
return dp[0][n-1];
for(int l = 1; l<n; l++) {
   for(int i = 0; i<n-l; i++) {
       int j = i+l;
       for(int k = i; k<j; k++) {
           dp[i][j] = max(dp[i][j], dp[i][k] + result[k] + dp[k+1][j]);
       }
   }
}
 
return dp[0][n-1]
Similar Problems
1130. Minimum Cost Tree From Leaf Values Medium


for (int l = 1; l < n; ++l) {
   for (int i = 0; i < n - l; ++i) {
       int j = i + l;
       dp[i][j] = INT_MAX;
       for (int k = i; k < j; ++k) {
           dp[i][j] = min(dp[i][j], dp[i][k] + dp[k+1][j] + maxs[i][k] * maxs[k+1][j]);
       }
   }
}
96. Unique Binary Search Trees Medium


1039. Minimum Score Triangulation of Polygon Medium


546. Remove Boxes Medium


1000. Minimum Cost to Merge Stones Medium


312. Burst Balloons Hard


Top-Down
for (int k = i; k <= j; ++k) {
    result = max(result, topDown(nums, i, k-1, memo) + (i-1 >= 0 ? nums[i-1] : 1) * nums[k] * (j+1 < nums.size() ? nums[j+1] : 1) + topDown(nums, k+1, j, memo));
}
return memo[i][j] = result;
Bottom-Up
for(int l = 1; l < n; l++) {
    for(int i = 0; i < n-l; i++) {
        int j = i+l;
        for(int k = i; k <= j; k++) {
            dp[i][j] = max(dp[i][j], (((k>i && k>0) ? dp[i][k-1] : 0) + (i>0 ? nums[i-1] : 1) * nums[k] * (j<n-1 ? nums[j+1] : 1) + ((k<j && k<n-1) ? dp[k+1][j] : 0)));
        }
    }
}
return dp[0][n-1];
375. Guess Number Higher or Lower II Medium


DP on Strings
Problem List: https://leetcode.com/list/55afh7m7


General problem statement for this pattern can vary but most of the time you are given two strings where lengths of those strings are not big


Statement
Given two strings s1 and s2, return some result.


Approach
Most of the problems on this pattern requires a solution that can be accepted in O(n^2) complexity.


// i - indexing string s1
// j - indexing string s2
for (int i = 1; i <= n; ++i) {
   for (int j = 1; j <= m; ++j) {
       if (s1[i-1] == s2[j-1]) {
           dp[i][j] = /*code*/;
       } else {
           dp[i][j] = /*code*/;
       }
   }
}
If you are given one string s the approach may little vary


for (int l = 1; l < n; ++l) {
   for (int i = 0; i < n-l; ++i) {
       int j = i + l;
       if (s[i] == s[j]) {
           dp[i][j] = /*code*/;
       } else {
           dp[i][j] = /*code*/;
       }
   }
}
1143. Longest Common Subsequence Medium


for (int i = 1; i <= n; ++i) {
   for (int j = 1; j <= m; ++j) {
       if (text1[i-1] == text2[j-1]) {
           dp[i][j] = dp[i-1][j-1] + 1;
       } else {
           dp[i][j] = max(dp[i-1][j], dp[i][j-1]);
       }
   }
}
647. Palindromic Substrings Medium


for (int l = 1; l < n; ++l) {
   for (int i = 0; i < n-l; ++i) {
       int j = i + l;
       if (s[i] == s[j] && dp[i+1][j-1] == j-i-1) {
           dp[i][j] = dp[i+1][j-1] + 2;
       } else {
           dp[i][j] = 0;
       }
   }
}
516. Longest Palindromic Subsequence Medium


1092. Shortest Common Supersequence Medium


72. Edit Distance Hard


115. Distinct Subsequences Hard


712. Minimum ASCII Delete Sum for Two Strings Medium


5. Longest Palindromic Substring Medium


Decision Making
Problem List: https://leetcode.com/list/55af7bu7


The general problem statement for this pattern is forgiven situation decide whether to use or not to use the current state. So, the problem requires you to make a decision at a current state.


Statement
Given a set of values find an answer with an option to choose or ignore the current value.


Approach
If you decide to choose the current value use the previous result where the value was ignored; vice-versa, if you decide to ignore the current value use previous result where value was used.


// i - indexing a set of values
// j - options to ignore j values
for (int i = 1; i < n; ++i) {
   for (int j = 1; j <= k; ++j) {
       dp[i][j] = max({dp[i][j], dp[i-1][j] + arr[i], dp[i-1][j-1]});
       dp[i][j-1] = max({dp[i][j-1], dp[i-1][j-1] + arr[i], arr[i]});
   }
}
198. House Robber Easy


for (int i = 1; i < n; ++i) {
   dp[i][1] = max(dp[i-1][0] + nums[i], dp[i-1][1]);
   dp[i][0] = dp[i-1][1];
}
121. Best Time to Buy and Sell Stock Easy


714. Best Time to Buy and Sell Stock with Transaction Fee Medium


309. Best Time to Buy and Sell Stock with Cooldown Medium


123. Best Time to Buy and Sell Stock III Hard


188. Best Time to Buy and Sell Stock IV Hard


I hope these tips will be helpful ðŸ˜Š
